<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://chaosreigned.github.io/</id>
    <title>Gridea</title>
    <updated>2022-03-14T08:14:52.133Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://chaosreigned.github.io/"/>
    <link rel="self" href="https://chaosreigned.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://chaosreigned.github.io/images/avatar.png</logo>
    <icon>https://chaosreigned.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Allure]]></title>
        <id>https://chaosreigned.github.io/post/allure/</id>
        <link href="https://chaosreigned.github.io/post/allure/">
        </link>
        <updated>2021-11-25T07:37:17.000Z</updated>
        <content type="html"><![CDATA[<p>Allure 是一款轻量级、支持多语言的开源自动化测试报告生成框架，由Java语言开发，支持 pytest 等测试框架，并可以集成到 Jenkins。</p>
<h3 id="allure安装">allure安装</h3>
<pre><code>wget -P /tmp/ http://github.com/allure-framework/allure2/releases/download/2.16.1/allure-2.16.1.tgz
tar -zvxf /tmp/allure-2.16.1.tgz -C /tmp/
ln -s  /tmp/allure-2.16.1/bin/allure /usr/bin/allure
</code></pre>
<h3 id="allure-pytest安装">allure-pytest安装</h3>
<pre><code>pip install allure-pytest
</code></pre>
<h3 id="生成allure报告">生成allure报告</h3>
<pre><code>pytest [测试文件] -s -q --alluredir=path(报告存储路径)
</code></pre>
<h3 id="查看在线报告">查看在线报告</h3>
<pre><code>allure serve path
</code></pre>
<h3 id="生成查看离线报告">生成&amp;查看离线报告</h3>
<pre><code>allure generate path -o 离线path --clean (覆盖路径加--clean)
allure open -h 127.0.0.1 -p 8883  离线path
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[寻找字典序第k小的数]]></title>
        <id>https://chaosreigned.github.io/post/xun-zhao-zi-dian-xu-di-k-xiao-de-shu/</id>
        <link href="https://chaosreigned.github.io/post/xun-zhao-zi-dian-xu-di-k-xiao-de-shu/">
        </link>
        <updated>2021-08-25T08:41:38.000Z</updated>
        <content type="html"><![CDATA[<p>给定整数 n 和 k，找到 1 到 n 中字典序第 k 小的数字。<br>
注意：1 ≤ k ≤ n ≤ 10^9</p>
<pre><code>public int getKthNumber(int n, int k){
    int cur = 1;
    k--;
    while(k&gt;0){
        int step = 0;
        long start = cur, end = cur+1;
        while(start&lt;=n){
            step+= Math.min(n+1,end) - start;
            start*=10;
            end*=10;
        }
        if(k&gt;=step){
            cur++;
            k-=step;
        }else{
            cur*=10;
            k--;
        }
    }
    return cur;
}</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[鞋带公式]]></title>
        <id>https://chaosreigned.github.io/post/xie-dai-gong-shi/</id>
        <link href="https://chaosreigned.github.io/post/xie-dai-gong-shi/">
        </link>
        <updated>2021-07-29T13:06:55.000Z</updated>
        <content type="html"><![CDATA[<p>计算多边形面积<br>
<img src="https://chaosreigned.github.io//post-images/1627564052326.jpeg" alt="" loading="lazy"></p>
<p>对于三角形来说：</p>
<pre><code>public double area(int[] A, int[] B, int[] C) {
    return 0.5 * Math.abs(A[0]*B[1] + B[0]*C[1] + C[0]*A[1]
            -A[1]*B[0] - B[1]*C[0] - C[1]*A[0]);
}</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[水塘抽样]]></title>
        <id>https://chaosreigned.github.io/post/shui-tang-chou-yang/</id>
        <link href="https://chaosreigned.github.io/post/shui-tang-chou-yang/">
        </link>
        <updated>2021-06-03T06:19:32.000Z</updated>
        <content type="html"><![CDATA[<p>水塘抽样(Reservoir sampling)其目的在于从包含n个项目的集合S中选取k个样本，其中<strong>n为一很大或未知的数量</strong>，尤其适用于<strong>不能把所有n个项目都存放到内存</strong>的情况。</p>
<p>伪代码：</p>
<pre><code>從S中抽取首k項放入「水塘」中
對於每一個S[j]項（j ≥ k）：
隨機產生一個範圍從0到j的整數r
若 r &lt; k 則把水塘中的第r項換成S[j]項
</code></pre>
<p>当k为1的时候：</p>
<pre><code>public int pick(int[] nums) {
    int res = 0;
    for (int i = 1; i &lt;= nums.length; i++) {
        if (new Random().nextInt(i) == 0) {
            res = i;
        }
    }
    return res;
}</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[快排&快选]]></title>
        <id>https://chaosreigned.github.io/post/kuai-pai-andkuai-xuan/</id>
        <link href="https://chaosreigned.github.io/post/kuai-pai-andkuai-xuan/">
        </link>
        <updated>2021-06-02T03:53:31.000Z</updated>
        <content type="html"><![CDATA[<p>基础快排：</p>
<pre><code>public void quickSort(int[] num, int left, int right) {
        if (left &gt;= right) {
            return;
        }
        int pivot = right;
        int small = left, big = left;
        while (small &lt; right) {
            if (num[small] &gt;= num[pivot]) {
                small++;
            } else {
                swap(num, small, big);
                small++;
                big++;
            }
        }
        swap(num, pivot, big);
        quickSort(num, left, big - 1);
        quickSort(num, big + 1, right);
}
</code></pre>
<p>优化-三数取中：</p>
<pre><code>public void quickSort(int[] num, int left, int right) {
    if (left &gt;= right) {
        return;
    }
    //三数取中
    if (right - left &gt; 1) {
        int mid = left + (right - left) / 2;
        if (num[left] &gt; num[mid]) {
            swap(num, left, mid);
        }
        if (num[left] &gt; num[right]) {
            swap(num, left, right);
        }
        if (num[mid] &gt; num[right]) {
            swap(num, mid, right);
        }
        swap(num, mid, right - 1);
    }

    int pivot = right - 1;
    int small = left + 1, big = left + 1;
    while (small &lt; pivot) {
        if (num[small] &gt;= num[pivot]) {
            small++;
        } else {
            swap(num, small, big);
            small++;
            big++;
        }
    }
    swap(num, pivot, big);
    quickSort(num, left, big - 1);
    quickSort(num, big + 1, right);
}
</code></pre>
<p>快速选择：</p>
<pre><code>public int quickSelect(int[] num, int left, int right, int k) {
    //三数取中
    reorderThree(num, left, right);

    int pivot = right - 1;
    int small = left + 1, big = left + 1;
    while (small &lt; pivot) {
        if (num[small] &gt;= num[pivot]) {
            small++;
        } else {
            swap(num, small, big);
            small++;
            big++;
        }
    }
    swap(num, pivot, big);
    //第k大
    if (num.length - big == k) {
        return num[big];
    }
    if (num.length - big &gt; k) {
        return quickSelect(num, big + 1, right, k);
    }
    return quickSelect(num, left, big - 1, k + big - num.length);
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java Arrays.sort()]]></title>
        <id>https://chaosreigned.github.io/post/java-arrayssort/</id>
        <link href="https://chaosreigned.github.io/post/java-arrayssort/">
        </link>
        <updated>2021-05-24T03:43:53.000Z</updated>
        <content type="html"><![CDATA[<p>java数组排序，针对基本类型，无法自定义comparator，只有包装类才可以自定义comparator。<br>
int[]是基本类型int数组，int[][]是包装类型int[]数组.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[两个key（key-pair）的Map]]></title>
        <id>https://chaosreigned.github.io/post/liang-ge-keykey-pairde-map/</id>
        <link href="https://chaosreigned.github.io/post/liang-ge-keykey-pairde-map/">
        </link>
        <updated>2021-05-14T06:58:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="python">python：</h2>
<pre><code>dict((x, y) : point)
</code></pre>
<h2 id="java">java：</h2>
<ul>
<li>
<p>嵌套MAP</p>
<pre><code>  Map&lt;Integer, Map&lt;Integer, V&gt;&gt; map = //...
  // ...
  map.get(2).get(5); 
</code></pre>
</li>
<li>
<p>pair key的包装类</p>
<pre><code>  public class Key {

      private final int x;
      private final int y;

      public Key(int x, int y) {
          this.x = x;
          this.y = y;
      }

      @Override
      public boolean equals(Object o) {
          if (this == o) return true;
          if (!(o instanceof Key)) return false;
          Key key = (Key) o;
          return x == key.x &amp;&amp; y == key.y;
      }

      @Override
      // 重写hashcode
      public int hashCode() {
          int result = x;
          result = 31 * result + y;
          return result;
      }

  }
</code></pre>
</li>
<li>
<p>google的hashBasedTable</p>
<pre><code>  import com.google.common.collect.HashBasedTable;
  import com.google.common.collect.Table;

  // 创建
  Table&lt;Long, Long, Point&gt; plane = HashBasedTable.create();

  // 新增
  plane.put(1L, 2L, pointA);
  plane.put(1L, 3L, pointB);
  plane.put(1L, 4L, pointC);

  // 获取
  Point pointA = plane.get(1L, 2L);
  Point pointB = plane.get(1L, 2L);
</code></pre>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[组合数]]></title>
        <id>https://chaosreigned.github.io/post/zu-he-shu/</id>
        <link href="https://chaosreigned.github.io/post/zu-he-shu/">
        </link>
        <updated>2021-05-14T06:54:12.000Z</updated>
        <content type="html"><![CDATA[<p>公式法：<br>
private int getCombination(int n, int k) {<br>
int a = 1, b = 1;<br>
if (k &gt; n / 2) {<br>
k = n - k;<br>
}<br>
for (int i = 1; i &lt;= k; i++) {<br>
a *= (n + 1 - i);<br>
b *= i;<br>
}<br>
return a / b;<br>
}</p>
<p>递归法：<br>
private int getCombination1(int n, int k) {<br>
if (k == 0 || n == k) {<br>
return 1;<br>
}<br>
return getCombination1(n - 1, k) + getCombination1(n - 1, k - 1)<br>
}</p>
<p>总结：单次求值公式法更快，如果是多次迭代求值的话，递归法+map速度更快</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[adb常用命令]]></title>
        <id>https://chaosreigned.github.io/post/adb-chang-yong-ming-ling/</id>
        <link href="https://chaosreigned.github.io/post/adb-chang-yong-ming-ling/">
        </link>
        <updated>2021-05-10T06:51:32.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>连接和断开设备
<ol>
<li>adb connect 10.90.136.179:15062 # 通过IP地址和端口号连接机器</li>
<li>adb disconnect # 断开所有连接</li>
<li>adb devices # 显示目前的连接状态</li>
</ol>
</li>
<li>shell
<ol>
<li>adb shell # 进入机器自带的命令行</li>
<li>adb shell pm list packages # 显示在机器上安装的所有软件</li>
<li>adb shell pm list packages -f # 显示所有软件的安装位置</li>
</ol>
</li>
<li>数据传输
<ol>
<li>adb pull /data/local/tmp/aweme_map.txt ~/bytedance # 拉取数据</li>
<li>adb push awemelite.apk /sdcard/ # 往机器压入数据</li>
<li>adb shell uiautomator dump /sdcard/ui.xml # 将当前屏幕上的控件树保存成xml文件</li>
<li>adb pull /sdcard/ui.xml ./ # 将xml文件拉取到本地保存</li>
</ol>
</li>
<li>安装
<ol>
<li>adb install /path/to/repacked/apk</li>
</ol>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二分法陷阱]]></title>
        <id>https://chaosreigned.github.io/post/er-fen-fa-xian-jing/</id>
        <link href="https://chaosreigned.github.io/post/er-fen-fa-xian-jing/">
        </link>
        <updated>2021-02-10T06:28:01.000Z</updated>
        <content type="html"><![CDATA[<p>在计算mid=(l+r)/2的时候，有可能l+r会超出int范围，导致无限循环<br>
应该用l+(r-l)/2来计算！！！</p>
]]></content>
    </entry>
</feed>