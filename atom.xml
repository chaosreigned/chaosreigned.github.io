<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://chaosreigned.github.io</id>
    <title>Chaos</title>
    <updated>2020-08-26T08:50:37.474Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://chaosreigned.github.io"/>
    <link rel="self" href="https://chaosreigned.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://chaosreigned.github.io/images/avatar.png</logo>
    <icon>https://chaosreigned.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Chaos</rights>
    <entry>
        <title type="html"><![CDATA[牛顿迭代法计算开方]]></title>
        <id>https://chaosreigned.github.io/post/niu-dun-die-dai-fa-ji-suan-kai-fang/</id>
        <link href="https://chaosreigned.github.io/post/niu-dun-die-dai-fa-ji-suan-kai-fang/">
        </link>
        <updated>2020-08-26T08:37:58.000Z</updated>
        <content type="html"><![CDATA[<p>x^2 = n;<br>
f(x) = x^2 -n;<br>
f(x)上每个点点切线斜率都为2x，因此f(x)的切线和x轴的交点为：x-f(x)/2x = (x+n/x)/2;<br>
从x为n开始，求得f(x)上该点切线与x轴的交点，会慢慢逼近最终达到f(x)和x轴的交点，及所求的开方值<br>
<img src="https://chaosreigned.github.io/post-images/1598431664578.jpg" alt="" loading="lazy"></p>
<h3 id="代码">代码：</h3>
<pre><code>int n;
public double sqrts(double x){
    double res = (x + n/ x) / 2;
    if (res == x) {
    return x;
    } else {
    return sqrts(res);
    }
} </code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux /proc文件夹]]></title>
        <id>https://chaosreigned.github.io/post/linux-proc-wen-jian-jia/</id>
        <link href="https://chaosreigned.github.io/post/linux-proc-wen-jian-jia/">
        </link>
        <updated>2020-08-26T08:37:11.000Z</updated>
        <content type="html"><![CDATA[<p>Proc是一个虚拟文件系统，在Linux系统中它被挂载于/proc目录之上。Proc有多个功能 ，这其中包括用户可以通过它访问内核信息或用于排错，这其中一个非常有 用的功能，也是Linux变得更加特别的功能就是以文本流的形式来访问进程信息。</p>
<ul>
<li>/proc/pid/cmdline 包含了用于开始进程的命令 ；</li>
<li>/proc/pid/cwd包含了当前进程工作目录的一个链接 ；</li>
<li>/proc/pid/environ 包含了可用进程环境变量的列表 ；</li>
<li>/proc/pid/exe 包含了正在进程中运行的程序链接；</li>
<li>/proc/pid/fd/ 这个目录包含了进程打开的每一个文件的链接；</li>
<li>/proc/pid/mem 包含了进程在内存中的内容；</li>
<li>/proc/pid/stat包含了进程的状态信息；</li>
<li>/proc/pid/statm 包含了进程的内存使用信息。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Drop cache]]></title>
        <id>https://chaosreigned.github.io/post/drop-cache/</id>
        <link href="https://chaosreigned.github.io/post/drop-cache/">
        </link>
        <updated>2020-08-26T08:36:46.000Z</updated>
        <content type="html"><![CDATA[<p>echo 3 &gt; /proc/sys/vm/drop_caches</p>
<p>查看free -h</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[快速创建大文件]]></title>
        <id>https://chaosreigned.github.io/post/kuai-su-chuang-jian-da-wen-jian/</id>
        <link href="https://chaosreigned.github.io/post/kuai-su-chuang-jian-da-wen-jian/">
        </link>
        <updated>2020-08-26T08:35:57.000Z</updated>
        <content type="html"><![CDATA[<p>fallocate -l 10t 文件名</p>
<p>fallocate命令可以为文件预分配物理空间。-l后接空间大小，默认单位为字节。也可后跟k、m、g、t、p、e来指定单位，分别代表KB、MB、GB、TB、PB、EB。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ArrayList]]></title>
        <id>https://chaosreigned.github.io/post/arraylist/</id>
        <link href="https://chaosreigned.github.io/post/arraylist/">
        </link>
        <updated>2020-08-26T08:35:05.000Z</updated>
        <content type="html"><![CDATA[<p>空间复杂度：</p>
<ul>
<li>初始容量：10</li>
<li>新容量=旧容量 * 3/2 + 1，每次增加50%左右</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vim行内跳转]]></title>
        <id>https://chaosreigned.github.io/post/vim-xing-nei-tiao-zhuan/</id>
        <link href="https://chaosreigned.github.io/post/vim-xing-nei-tiao-zhuan/">
        </link>
        <updated>2020-08-26T08:34:25.000Z</updated>
        <content type="html"><![CDATA[<p>h：往前一步<br>
l：往后一步</p>
<p>xxx+h：往前xxx步<br>
xxx+l：往后xxx步</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[字符串补零]]></title>
        <id>https://chaosreigned.github.io/post/zi-fu-chuan-bu-ling/</id>
        <link href="https://chaosreigned.github.io/post/zi-fu-chuan-bu-ling/">
        </link>
        <updated>2020-08-26T08:33:05.000Z</updated>
        <content type="html"><![CDATA[<p>String.format(&quot;%010d&quot;, 25);     //25为int型</p>
<ul>
<li>0代表前面要补的字符</li>
<li>10代表字符串长度</li>
<li>d表示参数为整数类型</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[并查集]]></title>
        <id>https://chaosreigned.github.io/post/bing-cha-ji/</id>
        <link href="https://chaosreigned.github.io/post/bing-cha-ji/">
        </link>
        <updated>2020-08-26T08:30:13.000Z</updated>
        <content type="html"><![CDATA[<p>并查集是一种树型的数据结构，用于处理一些不交集（Disjoint Sets）的合并及查询问题。<br>
有一个联合-查找算法（union-find algorithm）定义了两个用于此数据结构的操作：</p>
<ul>
<li>Find：确定元素属于哪一个子集。它可以被用来确定两个元素是否属于同一子集。</li>
<li>Union：将两个子集合并成同一个集合。</li>
</ul>
<h3 id="简化实现">简化实现：</h3>
<pre><code>public class UF {
    private int[] id;

    UF(int N) {
        id = new int[N + 1];
        for (int i = 0; i &lt;= N; i++) {
            id[i] = i;
        }
    }

    public void union(int a, int b) {
        int aID = find(a);
        int bID = find(b);
        if (aID != bID) {
            for (int i = 0; i &lt; id.length; i++) {
                if (id[i] == aID) {
                    id[i] = bID;
                }
            }
        }
    }

    public int find(int n){
        return id[n];
    }
}</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java位运算符]]></title>
        <id>https://chaosreigned.github.io/post/java-wei-yun-suan-fu/</id>
        <link href="https://chaosreigned.github.io/post/java-wei-yun-suan-fu/">
        </link>
        <updated>2020-08-26T08:28:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="移位">移位</h3>
<p>&lt;&lt;      :     左移运算符，num &lt;&lt; 1,相当于num乘以2<br>
&gt;&gt;      :     右移运算符，num &gt;&gt; 1,相当于num除以2<br>
&gt;&gt;&gt;    :     无符号右移，符号位都以0补齐</p>
<h3 id="位运算">位运算</h3>
<p>位与：&amp;<br>
位或：|<br>
位异或：^</p>
<p>x ^ 0s = x      x &amp; 0s = 0      x | 0s = x<br>
x ^ 1s = ~x     x &amp; 1s = x      x | 1s = 1s<br>
x ^ x = 0       x &amp; x = x       x | x = x</p>
<p>x &amp; (-x) 是保留位中最右边 1</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[浮点数运算不准确]]></title>
        <id>https://chaosreigned.github.io/post/fu-dian-shu-yun-suan-bu-zhun-que/</id>
        <link href="https://chaosreigned.github.io/post/fu-dian-shu-yun-suan-bu-zhun-que/">
        </link>
        <updated>2020-08-26T08:26:27.000Z</updated>
        <content type="html"><![CDATA[<p>3*0.1=0.30000000000000004</p>
<p>原因：二进制浮点数精度不够，任一整数都能表示为若干2的次方之和，但小数无法表示为若干2的次方之和</p>
<p>所以，浮点数计算判断要慎重</p>
]]></content>
    </entry>
</feed>